#version 430

layout(location=0) in vec3 aPos;
layout(location=1) in vec3 aColor;
layout(location=2) in vec2 aTexCoord;
layout(location=3) in vec3 aNormal;
layout(location=4) in vec4 aTangent;

out vec3 Color;
out vec2 TexCoord;
out vec3 Normal;
out vec3 FragPos;
out mat3 TBN;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	//gl_Position = projection * view * model * vec4(aPos, 1);
	gl_Position = vec4(aPos, 1.0);
	Color = aColor;
    TexCoord = aTexCoord;
	Normal = mat3(transpose(inverse(model))) * aNormal;
	FragPos = vec3(model * vec4(aPos, 1.0));
	
	vec3 T = normalize(vec3(model * vec4(aTangent.xyz, 0.0f)));
	vec3 N = normalize(vec3(model * vec4(aNormal,    0.0)));
	T = normalize(T - dot(T, N) * N);
	vec3 B = cross(N, T) * aTangent.w; // Bitangent 
	TBN = mat3(T, B, N);
};