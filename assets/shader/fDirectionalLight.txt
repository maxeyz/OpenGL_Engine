#version 430
out vec4 FragColor;

in vec2 TexCoord;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;

uniform sampler2D normalMap;
uniform vec3 viewPos;

struct Material {
	float shininess;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform Material material;

struct DirectionalLight {
	vec3 direction;
	vec3 color;
	float intensity;
};
uniform DirectionalLight light;

vec3 objectColor = vec3(1.0f, 1.0f, 1.0f);

void main()
{
	vec3 FragPos = texture(gPosition, TexCoord).rgb;
	vec3 Normal = texture(gNormal, TexCoord).rgb;
	vec3 Albedo = texture(gAlbedoSpec, TexCoord).rgb;
	float Specular = texture(gAlbedoSpec, TexCoord).a;
	
	//Directional Light
	vec3 lightDir = normalize(-light.direction);
		
	//Ambient light
	vec3 ambient = light.intensity * light.color;
		
	//Diffuse light
	vec3 diffuse = max(dot(Normal, lightDir), 0.0f) * Albedo * light.color;

	//Specular light
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, Normal);
		
	//Blinn phong
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(Normal, halfwayDir), 0.0), (material.shininess * 4));
	vec3 specular = light.color * spec * Specular;
		
	//Result
	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = texture(gAlbedoSpec, TexCoord) * vec4(result, 1.0);
};